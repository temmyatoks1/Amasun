##################################STEP-1-START#########################################

Setup IAM Role for EKS

EKS_Cloudelligent


Custom VPC Setup via Cloudformation
https://docs.aws.amazon.com/eks/latest/userguide/create-public-private-vpc.html

https://amazon-eks.s3-us-west-2.amazonaws.com/cloudformation/2019-11-15/amazon-eks-vpc-sample.yaml



https://amazon-eks.s3-us-west-2.amazonaws.com/cloudformation/2018-11-07/amazon-eks-vpc-sample.yaml






https://docs.aws.amazon.com/eks/latest/userguide/install-kubectl.html


1. Installing kubectl
curl -o kubectl https://amazon-eks.s3-us-west-2.amazonaws.com/1.12.7/2019-03-27/bin/linux/amd64/kubectl

chmod +x kubectl

mkdir bin

cp kubectl bin/



2. Installing AWS IAM authenticator ---> (This allows us to administor our EKS Clustor, using our IAM Identity)

https://github.com/kubernetes-sigs/aws-iam-authenticator

We are using the AWS Version of IAM authenticator ---> https://docs.aws.amazon.com/eks/latest/userguide/install-aws-iam-authenticator.html

curl -o aws-iam-authenticator https://amazon-eks.s3-us-west-2.amazonaws.com/1.12.7/2019-03-27/bin/linux/amd64/aws-iam-authenticator

chmod +x ./aws-iam-authenticator

mkdir -p $HOME/bin && cp ./aws-iam-authenticator $HOME/bin/aws-iam-authenticator && export PATH=$HOME/bin:$PATH


3. Now we need to configure kubectl for EKS ---> (make sure you have aws cli version 1.16)

 aws --version
aws-cli/1.16.102 Python/2.7.14 Linux/4.14.114-105.126.amzn2.x86_64 botocore/1.12.92

Note: Update aws cli using PIP instead of YUM

https://docs.aws.amazon.com/cli/latest/userguide/install-linux.html



curl -O https://bootstrap.pypa.io/get-pip.py

#Add an export command at the end of your profile script that's similar to the following example.
export PATH=~/.local/bin:$PATH

# Reload the profile into your current session to put those changes into effect.

source ~/.bash_profile

# Upgrade AWS CLI Version
pip install awscli --upgrade --user


4. Now we need to update our cubeconfig file

# Set aws credentials
AWS Cli installation
https://www.osradar.com/install-aws-cli-ubuntu-18-04/

aws configure

Provide your user progmatic credentials

than

update our cubeconfig file

IMPORTANT TO UPDATE YOUR ./kube
################################################################
### MUST ###
---> aws eks update-kubeconfig --name eks-cloudelligent <---
##################################################################
https://docs.aws.amazon.com/eks/latest/userguide/troubleshooting.html


Added new context arn:aws:eks:us-west-2:898668804275:cluster/eks-cloudelligent to /root/.kube/config

kubectl config view

apiVersion: v1
clusters:
- cluster:
    certificate-authority-data: DATA+OMITTED
    server: https://069ED5E1B13D5C06E60F75AFDE032409.sk1.us-west-2.eks.amazonaws.com
  name: arn:aws:eks:us-west-2:898668804275:cluster/eks-cloudelligent
contexts:
- context:
    cluster: arn:aws:eks:us-west-2:898668804275:cluster/eks-cloudelligent
    user: arn:aws:eks:us-west-2:898668804275:cluster/eks-cloudelligent
  name: arn:aws:eks:us-west-2:898668804275:cluster/eks-cloudelligent
current-context: arn:aws:eks:us-west-2:898668804275:cluster/eks-cloudelligent
kind: Config
preferences: {}
users:
- name: arn:aws:eks:us-west-2:898668804275:cluster/eks-cloudelligent
  user:
    exec:
      apiVersion: client.authentication.k8s.io/v1alpha1
      args:
      - --region
      - us-west-2
      - eks
      - get-token
      - --cluster-name
      - eks-cloudelligent
      command: aws
      env: null


------------------------------------
Test Your EKS Cluster

kubectl cluster-info

Kubernetes master is running at https://069ED5E1B13D5C06E60F75AFDE032409.sk1.us-west-2.eks.amazonaws.com
CoreDNS is running at https://069ED5E1B13D5C06E60F75AFDE032409.sk1.us-west-2.eks.amazonaws.com/api/v1/namespaces/kube-system/services/kube-dns:dns/proxy



##################################STEP-1-END#########################################

#################################STEP-2-START########################################

# Launching the EKS Worker Nodes

https://docs.aws.amazon.com/eks/latest/userguide/getting-started-console.html

https://amazon-eks.s3-us-west-2.amazonaws.com/cloudformation/2019-11-15/amazon-eks-nodegroup.yaml


https://amazon-eks.s3-us-west-2.amazonaws.com/cloudformation/2018-11-07/amazon-eks-nodegroup.yaml



We will be using Cloudformation and we will deploy a stack for our worker nodes.

---> Go to Cloudformation and use this URL to create this stack from the URL ---> https://amazon-eks.s3-us-west-2.amazonaws.com/cloudformation/2018-11-07/amazon-eks-nodegroup.yaml

Note: For Amazon Optimized AMI ---> https://docs.aws.amazon.com/eks/latest/userguide/eks-optimized-ami.html

ami-0923e4b35a30a5f53 ---> This is Oregon ---> because we deployed our EKS Cluster ---> eks-cloudelligent    in Oregon.

This is our Bucket automatically created in Oregon for this Cloudformation Template ---> cf-templates-7gd89mj54jv6-us-west-2

These are regular ec2-instances you own and pay for it.


---> From Cloudformation go to output section and copy the ARN ---> NodeInstanceRole

#You provisioned the worker nodes from a Cloudformation ---> now time join these nodes ---> Your EKS Cluster ---> We need to apply AWS AUTHENTICATOR configuration map.

arn:aws:iam::898668804275:role/EKS-Cloudelligent-WorkerNodes-NodeInstanceRole-D68SD4Y88L82

curl -O https://amazon-eks.s3-us-west-2.amazonaws.com/cloudformation/2018-11-07/aws-auth-cm.yaml

NOTE: YOUR CLUSTER SECURITY GROUP MUST BE SEPRATE AND YOUR CONTROLLER SECURITY GROUP MUST BE SEPRATE.

# Edit this file ---> replace the ARN ---> from Cloudformation output.


kubectl apply -f aws-auth-cm.yaml 


kubectl get nodes --watch

kubectl get events --all-namespaces -o wide


# ISSUES

https://aws.amazon.com/premiumsupport/knowledge-center/eks-worker-nodes-cluster/



How can I get my worker nodes to join my Amazon EKS cluster?
Last updated: 2019-10-17

My worker nodes won't join my Amazon Elastic Kubernetes Service (Amazon EKS) cluster? How can I resolve this issue?
Short Description
To get your worker nodes to join your Amazon EKS cluster, you must complete the following:

Confirm that you have DNS support for your Amazon Virtual Private Cloud (Amazon VPC)
Get the right permissions for the instance profile of your worker nodes
Configure the user data for your worker nodes
Verify that your worker nodes are in a subnet associated with your Amazon EKS cluster
Update the aws-auth ConfigMap with the NodeInstanceRole of your worker nodes
Meet the security group requirements of your worker nodes
Set the tags for your worker nodes
Confirm that your worker nodes can reach the API server endpoint for your Amazon EKS cluster
Important: The following steps don't include the additional configurations needed to register worker nodes in your Amazon EKS cluster in environments where the following criteria are not met:

In the VPC for your Amazon EKS cluster, the configuration parameter domain-name-servers is set to AmazonProvidedDNS. For more information, see DHCP Options Sets.
You're using an Amazon EKS-optimized Linux Amazon Machine Image (AMI) for launching your worker nodes.
Note: The Amazon EKS-optimized Linux AMI provides all necessary configurations, including a /etc/eks/bootstrap.sh bootstrap script for registering worker nodes to your Amazon EKS cluster.
Resolution
Confirm that you have DNS support for your VPC

Confirm that the VPC for your Amazon EKS cluster has support for a DNS hostname and DNS resolution.

If needed, view and update the DNS support attributes for your VPC.

Get the right permissions for the instance profile of your worker nodes

Attach the following AWS managed polices to the role associated with the instance profile of your worker nodes:

AmazonEKSWorkerNodePolicy
AmazonEKS_CNI_Policy
AmazonEC2ContainerRegistryReadOnly
To attach policies to roles, see Adding IAM Identity Permissions (Console).

Configure the user data for your worker nodes

Note: You don't have to configure the user data for your worker nodes if you're using AWS CloudFormation to launch your worker nodes.

To configure user data for your worker nodes, specify the user data when you launch your Amazon Elastic Compute Cloud (Amazon EC2) instances.

For example, if youâ€™re using a third-party tool like Terraform, update the User data field to launch your Amazon EKS worker nodes with the following:

#!/bin/bash
set -o xtrace
/etc/eks/bootstrap.sh ${ClusterName} ${BootstrapArguments}
Important: Replace ${ClusterName} with the name of your Amazon EKS cluster. Replace ${BootstrapArguments} with additional bootstrap values, or leave this property blank.

Verify that your worker nodes are in a subnet associated with your Amazon EKS cluster

1.    Open the Amazon EKS console.

2.    Choose Clusters, and then select your cluster.

3.    In the Networking section, identify the subnets associated with your cluster.

4.    Verify that your worker nodes are only part of the subnets listed in step 3.

Update the aws-auth ConfigMap with the NodeInstanceRole of your worker nodes

Verify that the aws-auth ConfigMap is configured correctly with the IAM role of your worker nodes (and not the instance profile).

Meet the security group requirements of your worker nodes

Confirm that the control plane security group and worker node security group are configured with recommended settings for inbound and outbound traffic.

For more information, see Cluster Security Group Considerations.

Set the tags for your worker nodes

For the Tag property of your worker nodes, set key to kubernetes.io/cluster/clusterName and set value to owned.

For more information, see Cluster VPC Considerations.

Confirm that your worker nodes can reach the API server endpoint for your Amazon EKS cluster

Consider the following:

You can launch worker nodes in a subnet associated with a route table that has a route to the API endpoint through a NAT Gateway or internet gateway.
If your worker nodes are launched in a restricted private network, then confirm that your worker nodes can reach the Amazon EKS API server endpoint.
If your worker nodes are launched as part of a VPC using a custom DNS instead of AmazonProvidedDNS, then your worker nodes might not resolve the endpoint for the Amazon EKS cluster if public access to the endpoint is disabled and only private access is enabled. For more information, see Enabling DNS resolution for Amazon EKS cluster endpoints. 

#################################STEP-2-END########################################

Kubernetes DASH-BOARD

#################################STEP-3-START######################################
https://kubernetes.io/docs/tasks/access-application-cluster/web-ui-dashboard/

https://github.com/kubernetes/dashboard

########################################################################################################################################
Installing the Kubernetes Dashboard
kubectl create -f https://raw.githubusercontent.com/kubernetes/dashboard/master/aio/deploy/recommended/kubernetes-dashboard.yaml
Installing Heapster and InfluxDB
kubectl apply -f https://raw.githubusercontent.com/kubernetes/heapster/master/deploy/kube-config/influxdb/heapster.yaml
kubectl apply -f https://raw.githubusercontent.com/kubernetes/heapster/master/deploy/kube-config/influxdb/influxdb.yaml
kubectl apply -f https://raw.githubusercontent.com/kubernetes/heapster/master/deploy/kube-config/rbac/heapster-rbac.yaml
Create an administrative account and cluster role binding
kubectl apply -f eks-admin-service-account.yaml
kubectl apply -f eks-admin-cluster-role-binding.yaml
Start proxy
kubectl proxy --address 0.0.0.0 --accept-hosts '.*' &  ---> Use this --->    kubectl proxy  &
Get a token
aws-iam-authenticator -i <cluster_name> token
Log in
http://localhost:8001/api/v1/namespaces/kube-system/services/https:kubernetes-dashboard:/proxy/#!/login


kubectl proxy  &

netstat -antp

aws-iam-authenticator -i eks-cloudelligent token

yum install -y jq

aws-iam-authenticator -i eks-cloudelligent token | jq -r .status.token
###########################################################################################################################################


# By default kubernetes dashboard user has very limited permissions

# In order to login we need create and administrative account and cluster role binding 

so we need to create a file eks-admin-service-account.yaml

vim eks-admin-service-account.yaml

apiVersion: v1
kind: ServiceAccount
metadata:
  name: eks-admin
  namespace: kube-system


kubectl apply -f eks-admin-service-account.yaml

#Than we need to create cluster role binding ---> this will associate or link the service account we created above with the CLUSTER ADMIN ROLE.

vim eks-admin-cluster-role-binding.yaml

apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
 name: eks-admin
roleRef:
 apiGroup: rbac.authorization.k8s.io
 kind: ClusterRole
 name: cluster-admin
subjects:
- kind: ServiceAccount
  name: eks-admin	
  namespace: kube-system



kubectl apply -f eks-admin-cluster-role-binding.yaml

kubectl proxy  &

netstat -antp

aws-iam-authenticator -i eks-cloudelligent token

yum install -y jq

aws-iam-authenticator -i eks-cloudelligent token | jq -r .status.token

k8s-aws-v1.aHR0cHM6Ly9zdHMuYW1hem9uYXdzLmNvbS8_QWN0aW9uPUdldENhbGxlcklkZW50aXR5JlZlcnNpb249MjAxMS0wNi0xNSZYLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUE1Q1BHVlhDWlVBNzZXQVZBJTJGMjAxOTA1MjMlMkZ1cy1lYXN0LTElMkZzdHMlMkZhd3M0X3JlcXVlc3QmWC1BbXotRGF0ZT0yMDE5MDUyM1QwMDA1MDBaJlgtQW16LUV4cGlyZXM9MCZYLUFtei1TaWduZWRIZWFkZXJzPWhvc3QlM0J4LWs4cy1hd3MtaWQmWC1BbXotU2lnbmF0dXJlPTYwNjUxZmQ0YzI1M2RmN2U5Mzk1MWMxOGEwODM3NjFiNWNhNDA4NmU3MTM1ZjA5N2I4YWNlM2RiNjRhNGE5OTg


http://localhost:8001/api/v1/namespaces/kube-system/services/https:kubernetes-dashboard:/proxy/#!/login

kubectl -n kube-system get svc -o wide


Example Important Commands

kubectl get pods --all-namespaces

kubectl -n kube-system get svc -o wide

kubectl get deployment --namespace=kube-system

kubectl delete deployment heapster --namespace=kube-system

###ISSUE###
no endpoints available for service \"kubernetes-dashboard\"

https://stackoverflow.com/questions/52893111/no-endpoints-available-for-service-kubernetes-dashboard

https://kubernetes.io/docs/setup/independent/create-cluster-kubeadm/#pod-network


https://github.com/kubernetes/dashboard/issues/3322

kubectl -n kube-system describe pod kubernetes-dashboard

#################################STEP-3-END######################################


EKS Important points

1. For us-east-1 region the AMI for Kubernetes 1.12 is "ami-0200e65a38edfb7e1"
  https://docs.aws.amazon.com/eks/latest/userguide/update-stack.html

2.  "Enable DNS support"

3.  "Enable DNS hostname "

4. If either or both of the DNS hostname and DNS resolution support is set to false, the following occurs:
- Instances with a public IP address do not receive corresponding public DNS hostnames.
- The Amazon-provided DNS server cannot resolve Amazon-provided private DNS hostnames.
- Instances receive custom private DNS hostnames if there is a custom domain name in the DHCP options set. If you are not using the Amazon-provided DNS server, your custom domain name servers must resolve the hostname as appropriate.
For reference:
- https://docs.aws.amazon.com/vpc/latest/userguide/vpc-dns.html#vpc-dns-support


##########################################################################################################
# https://aws.amazon.com/premiumsupport/knowledge-center/amazon-eks-cluster-access/

3.    To allow designated_user to assume the role of cluster_creator, run the following command:

aws sts assume-role â€“role-arn arn:aws:iam:11122223333:role/cluster_creator --role_session_name test
The output shows the temporary IAM credentials for designated_user, who is using the assumed role of cluster_creator.

4.    Use the temporary IAM credentials to set the AWS_ACCESS_KEY_ID, AWS_SESSION_TOKEN, and AWS_SECRET_ACCESS_KEY environment variables. See the following example:

export AWS_ACCESS_KEY_ID=AKIAIOSFODNN7EXAMPLE
export AWS_SESSION_TOKEN=EXAMPLETOKEN
export AWS_SECRET_ACCESS_KEY=wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
The AWS CLI now prioritizes the credentials set in the environment variables and uses them to make calls to AWS services.

5.    To verify that the AWS CLI is using the assumed role for cluster_creator, run the following command:

aws sts get-caller-identity






### Terraform EKS Networking ###
https://learn.hashicorp.com/terraform/aws/eks-intro#base-vpc-networking


# https://www.arangodb.com/docs/stable/tutorials-kubernetes-eks.html

# https://www.codementor.io/slavko/kubernetes-cluster-on-aws-eks-lecygk6rl

# EKS TAGGING REQUIREMENTS

https://docs.aws.amazon.com/eks/latest/userguide/network_reqs.html

##################################################################################################################
# Worker Nodes Fail to Join Cluster

https://docs.aws.amazon.com/eks/latest/userguide/troubleshooting.html

The ClusterName in your worker node AWS CloudFormation template does not exactly match the name of the cluster you want your worker nodes to join. Passing an incorrect value to this field results in an incorrect configuration of the worker node's /var/lib/kubelet/kubeconfig file, and the nodes will not join the cluster. 


# https://medium.com/getamis/customize-aws-eks-worker-node-ami-d7b3d203051


###################################################################################################################
### Amazon EKS with OIDC provider, IAM Roles for Kubernetes services accounts ###

https://medium.com/@marcincuber/amazon-eks-with-oidc-provider-iam-roles-for-kubernetes-services-accounts-59015d15cb0c

Amazon EKS with OIDC provider, IAM Roles for Kubernetes services accounts

With the latest release of EKS (1.13 and 1.14), AWS Kubernetes control plane comes with support for IAM roles for service accounts. This feature allows us to associate an IAM role with a Kubernetes service account. We can now provision temporary credentials and then provide AWS permissions to the containers in any pod that uses that service account. Furthermore, we no longer need to provide extended permissions to the worker node IAM role so that pods on that node can call AWS APIs

#####################################################################################################################



